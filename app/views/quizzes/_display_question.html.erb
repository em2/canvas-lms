<% 
  question = display_question 
  question_type = answer_type(question)
  user_answer ||= nil
  user_answer_hash ||= {}
  user_answer ||= user_answer_hash[hash_get(question, :id)]
  assessing ||= false
  assessment_results ||= false
  editable ||= false
  editing ||= false
  in_group ||= false
  question_bank_id ||= nil
  asset_string ||= (question_bank_id ? 'assessment_question' : 'quiz_question') + "_#{hash_get(question, :id)}"
  if question_type.display_answers == "multiple" && hash_get(question, :question_type) != "missing_word_question"
    right_answers = hash_get(question, :answers, {})
    right_answers = (hash_get(question, :matches) || hash_get(question, :answers).sort_by{|a| rand }) if question_type.entry_type == "matching" rescue {}
  end
%>
<div class="question_holder <%= "group" if in_group %>" id="<%= "question_template" unless question %>" style="<%= hidden unless question %>">
  <div style="display: block; height: 1px; overflow: hidden;">&nbsp;</div>
  <a name="question_<%= hash_get(question, :id, "blank") %>"></a>
  <fieldset class="display_question question <%= question_type.question_type %> <%= "marked" if assessing && @stored_params && @stored_params["question_#{hash_get(question, :id)}_marked"] %> <%= "correct" if user_answer && hash_get(user_answer, :correct) == true %> <%= "incorrect" if user_answer && hash_get(user_answer, :correct) == false %>" id="question_<%= hash_get(question, :id, "new") %>">
    <div class="move"><%= image_tag "move.png", :class => "move_icon" %></div>
    <% if assessing %>
      <div class="flag_question">
        <%= image_tag "flag_question.png", :title => t('titles.mark_to_revisit', "Mark this question to come back to later"), :class => "flag_icon" %>
      </div>
    <% end %>
    <legend class="header" <%= hidden(true) if (assessing || assessment_results) && question_type && question_type.entry_type == "none" %>>
      <span class="name question_name"><%= hash_get(question, :question_name) %></span>:
      <span class="question_points_holder" style="<%= hidden if question_type && question_type.entry_type == "none" %>">
        <%= t(:points_possible, "%{points_possible} pts", :points_possible => raw("<span class=\"points question_points\">#{hash_get(question, :points_possible, "0")}</span>")) %>
      </span>
      <% if question && hash_get(question, :question_type) != "missing_word_question" && hash_get(question, :question_text) && hash_get(question, :question_text).length < 255 %>
        <span class='ui-helper-hidden-accessible'><%= hash_get(question, :question_text) %></span>
      <% else %> 
        <a class='ui-helper-hidden-accessible' href="#question_<%= hash_get(question, :id, "new") %>_question_text"><%= t(:skip_question_text, "Skip to question text.") %></a>
      <% end %>
    </legend>
    <div class="links" style="<%= hidden if user_answer || assessing %>">
      <a href="#" class="edit_question_link no-hover" title="<%= t 'links.edit_question', 'Edit this Question' %>"><%= image_tag "edit.png" %></a>
      <a href="#" class="delete_question_link no-hover" title="<%= t 'links.delete_question', 'Delete this Question' %>"><%= image_tag "delete.png" %></a>
    </div>
    <div style="display: none;">
      <span class="question_type"><%= (question_type.try_rescue(:question_type)) %></span>
      <span class="answer_selection_type"></span>
      <% if question_bank_id %>
        <a href="<%= context_url(@context, :context_question_bank_assessment_question_url, question_bank_id, hash_get(question, :id, "{{ id }}")) %>" class="update_question_url">&nbsp;</a>
      <% else %>
        <a href="<%= context_url(@context, :context_quiz_quiz_question_url, @quiz.id, hash_get(question, :id, "{{ id }}")) %>" class="update_question_url">&nbsp;</a>
      <% end %>
      <span class="assessment_question_id"><%= hash_get(question, :assessment_question_id, nbsp) %></span>
    </div>
    <div class="clear"></div>
    <div class="text">
      <div class="original_question_text" style="display: none;">
        <textarea style="display: none;" name="text_after_answers" class="textarea_text_after_answers"><%= h(hash_get(question, :text_after_answers)) %></textarea>
        <textarea style="display: none;" name="question_text" class="textarea_question_text"><%= h(hash_get(question, :question_text)) %></textarea>
      </div>
      <div id="question_<%= hash_get(question, :id, "new") %>_question_text" class="question_text user_content">
        <% if question && hash_get(question, :question_type) == "missing_word_question" %>
          <span class="text_before_answers"><%= user_content(hash_get(question, :question_text)) %></span>
          <select class="answer_select question_input" name="question_<%= hash_get(question, :id, "blank") %>">
            <option value=""><%= t(:default_question_answer, "[ Choose ]") %></option>
            <% hash_get(question, :answers, []).each do |answer| %>
              <option value="<%= hash_get(answer, :id) %>" <%= "selected" if user_answer && hash_get(user_answer, :answer_id) == hash_get(answer, :id) || (@stored_params && @stored_params["question_#{hash_get(question, :id)}"].to_s == hash_get(answer, :id).to_s) %>><%= hash_get(answer, :text) %></option>
            <% end %>
          </select>
          <span class="text_after_answers"><%= user_content(hash_get(question, :text_after_answers)) %></span>
        <% elsif question && hash_get(question, :question_type) == "fill_in_multiple_blanks_question" && @stored_params %>
          <%= fill_in_multiple_blanks_question :question => question, :answers => @stored_params %>
        <% else %>
          <%= user_content(hash_get(question, :question_text)) %>
        <% end %>
      </div>
      <% if question_type && question_type.unsupported %>
        <div class="unsupported_question_type_message" style="font-size: 0.8em; font-weight: bold;">
          <%= t(:unsupported_question_type, <<-TEXT, :question_type => hash_get(question, :question_type))
          This question was imported from an external source. It was a
          '%{question_type}' question, which is not supported in this quiz
          tool.
          TEXT
        %></div>
      <% end %>
      <% if editing %>
      <div class="variable_definitions_holder calculated_question_answers" style="<%= hidden unless question && hash_get(question, :question_type) == 'calculated_question' %>">
        <div class="calculated_question_answers_header"><%= t('headers.variables', "Variables") %></div>
        <div class="calculated_question_answers_content">
          <table class="variable_definitions">
            <thead>
              <tr>
                <th><%= t('headers.variable_name', "Variable") %></th>
                <th><%= t('headers.variable_minimum', "Min") %></th>
                <th><%= t('headers.variable_maximum', "Max") %></th>
                <th><%= t('headers.variable_precision', "Decimal Places") %></th>
              </tr>
            </thead>
            <tbody>
              <% hash_get(question, :variables, []).each do |variable| %>
                <tr>
                  <td class='name'><%= hash_get(variable, :name) %></td>
                  <td class='min'><%= hash_get(variable, :min) %></td>
                  <td class='max'><%= hash_get(variable, :max) %></td>
                  <td class='scale'><%= hash_get(variable, :scale) %></td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
      <div class="formulas_holder calculated_question_answers" style="<%= hidden unless question && hash_get(question, :question_type) == 'calculated_question' %>">
        <div class="calculated_question_answers_header"><%= t('headers.formulas', "Formulas") %></div>
        <div class="calculated_question_answers_content">
          <div class="formulas_list">
            <% hash_get(question, :formulas, []).each do |formula| %>
              <div><%= h(hash_get(formula, :formula)) %></div>
            <% end %>
          </div>
        </div>
      </div>
      <div class="equation_combinations_holder_holder calculated_question_answers" style="<%= hidden unless question && hash_get(question, :question_type) == 'calculated_question' %>">
        <div style="display: none;" class="answer_tolerance"><%= hash_get(question, :answer_tolerance, 0) %></div>
        <div style="display: none;" class="formula_decimal_places"><%= hash_get(question, :formula_decimal_places, 0) %></div>
        <div class="calculated_question_answers_header"><%= t('headers.possible_solutions', "Possible Solutions") %></div>
        <div class="calculated_question_answers_content equation_combinations_holder">
          <table class="equation_combinations">
            <% if question && hash_get(question, :question_type) == "calculated_question" && editing %>
              <thead>
                <tr>
                  <% hash_get(question, :variables, []).each do |variable| %>
                    <th><%= hash_get(variable, :name) %></th>
                  <% end %>
                  <th><%= t('headers.solution_answer', "Answer") %></th>
                </tr>
              </thead>
              <tbody>
                <% hash_get(question, :answers, []).each do |answer| %>
                  <tr>
                    <% hash_get(answer, :variables).each do |variable| %>
                      <td><%= hash_get(variable, :value) %></td>
                    <% end %>
                    <td class='final_answer'><%= hash_get(answer, :answer) || hash_get(answer, :exact) %></td>
                  </tr>
                <% end %>
              </tbody>
            <% end %>
          </table>
        </div>
      </div>
      <div class="multiple_answer_sets_holder" style="<%= hidden unless question && ['multiple_dropdowns_question', 'fill_in_multiple_blanks_question'].include?(hash_get(question, :question_type)) %>">
        <% ot(:show_ansers_for_variable, "Show Answers for %{variable}", :variable => capture{ %>
        <select class="blank_id_select">
          <% hash_get(question, :answers, []).map{|a| hash_get(a, :blank_id) }.uniq.compact.each do |variable| %>
            <option value="<%= variable %>"><%= variable %></option>
          <% end %>
        </select>
        <% }) %>
      </div>
      <% end %>
      <div class="answers">
        <% if assessing %>
          <% if question %>
            <% if question_type.display_answers == "multiple" && hash_get(question, :question_type) != "missing_word_question" %>
              <% list = hash_get(question, :answers, []) %>
              
              <%= render :partial => "quizzes/multi_answer", :collection => list, :locals => 
                  {:question => question, :right_answers => right_answers, :question_type => question_type, :user_answer => user_answer} %>
            <% elsif question_type.display_answers == "single" %>
              <%= render :partial => "quizzes/single_answer", :locals => 
                    {:question => question, :right_answers => right_answers, :question_type => question_type, :user_answer => user_answer} %>
            <% end %>
          <% end %>
        <% else %>
          <% if user_answer && question && question_type.multiple_sets %>
            <% variables = hash_get(question, :original_question_text, "").scan(/\[[^\]]+\]/).to_a.compact.map{|v| v[1..-2] } %>
            <% variables = variables & hash_get(question, :answers, []).map{|a| hash_get(a, :blank_id) }.compact.uniq %>
            <% variables.each_with_index do |variable, idx| %>
              <b><%= before_label(:for_answer_number, "For answer %{answer_number}", :answer_number => idx + 1) %></b>
              <div style="margin-left: 20px;">
                <% answers = hash_get(question, :answers, []).select{|a| hash_get(a, :blank_id) == variable } %>
                <% if question_type.entry_type == "text_box" %>
                  <% user_answer[:text] = hash_get(user_answer, "answer_for_#{variable}") %>
                  <% matched_answer = answers.find{|a| hash_get(a, :text) == hash_get(user_answer, :text) || hash_get(a, :id) == hash_get(user_answer, :answer_id) } %>
                  <span class="text_box_answer <%= 'correct_text_box_answer' if matched_answer && matched_answer[:weight] == 100 %>">
                    <%= before_label(:your_answer, "Your Answer") %>
                    <b><%= h(hash_get(user_answer, :text) || t(:you_left_this_blank, "You left this blank")) %></b>
                  </span>
                  <% if matched_answer && comment_get(matched_answer, :comments).present? %>
                    <div class="answer hide_right_arrow correct_answer">
                    <div class="answer_comment_holder">
                      <div class="comment_top"></div>
                      <div class="answer_comment"><%= comment_get(matched_answer, :comments) %></div>
                    </div>
                    </div>
                    <div class="clear"></div>
                  <% end %>
                  <% show_headers = @quiz && @quiz.show_correct_answers %>
                  <% if show_headers %>
                    <div style="font-size: 0.8em; margin-top: 5px; margin-bottom: 5px;">
                      <u><%= before_label(:correct_answers, {:one => "Correct Answer", :other => "Correct Answers"}, :count => answers.size) %></u>
                    <div style="xfont-size: 0.8em;">
                  <% end %>
                  <% if editing || show_headers || !question_type.entry_type.match(/text_box/) %>
                    <%= render :partial => "quizzes/display_answer", :collection => answers, :locals => {:assessment_results => assessment_results, :question_type => question_type, :user_answer => user_answer, :question => question} %>
                  <% end %>
                  <% if show_headers %>
                    </div></div>
                  <% end %>
                <% else %>
                  <% user_answer[:answer_id] = hash_get(user_answer, "answer_id_for_#{variable}") %>
                  <%= render :partial => "quizzes/display_answer", :collection => answers, :locals => {:assessment_results => assessment_results, :question_type => question_type, :user_answer => user_answer, :question => question} %>
                <% end %>
              </div>
            <% end %>
          <% else %>
            <% if user_answer && question_type.display_answers == "single" %>
              <div style="padding: 5px 20px;">
                Your Answer: 
                <% if question_type.entry_type == 'textarea' %>
                  <div class="user_content quiz_response_text"><%= hash_get(user_answer, :text).html_safe %></div>
                <% else %>
                  <b><%= h(hash_get(user_answer, :text) || t(:you_left_this_blank, "You left this blank")) %></b>
                  <% matched_answer = hash_get(question, :answers, []).find{|a| hash_get(a, :text) == hash_get(user_answer, :text) || hash_get(a, :id) == hash_get(user_answer, :answer_id) } %>
                  <% hash_get(question, :answers, []).each do |a| 
                    val = hash_get(user_answer, :text).to_f 
                    matched_answer = a if hash_get(a, :numerical_answer_type) == "exact_answer" && val <= (hash_get(a, :exact) + hash_get(a, :margin)) && val >= (hash_get(a, :exact) - hash_get(a, :margin)) 
                    matched_answer = a if hash_get(a, :numerical_answer_type) == "range_answer" && val <= hash_get(a, :end) && val >= hash_get(a, :start)
                   end %>
                  <% if matched_answer && comment_get(matched_answer, :comments).present? %>
                    <div class="answer hide_right_arrow correct_answer">
                    <div class="answer_comment_holder">
                      <div class="comment_top"></div>
                      <div class="answer_comment"><%= comment_get(matched_answer, :comments) %></div>
                    </div>
                    </div>
                    <div class="clear"></div>
                  <% end %>
                <% end %>
              </div>
            <% end %>
            <% question[:answers] = [] if editing && question && hash_get(question, :question_type) == 'calculated_question' %>
            <% if question && (user_answer || assessment_results || !@quiz || @quiz.show_correct_answers || (!assessment_results && !user_answer)) %>
              <% show_headers = @quiz && @quiz.show_correct_answers && user_answer && question_type.display_answers == "single" && hash_get(question, :question_type) != "essay_question" %>
              <% if show_headers %>
                <div style="margin-left: 20px; font-size: 0.8em;">
                <u><%= before_label :correct_answers2, "Correct Answer(s)" %></u>
                <div style="xfont-size: 0.8em;">
              <% end %>
              <% if editing || show_headers || !question_type.entry_type.match(/text_box/) %>
                <%= render :partial => "quizzes/display_answer", :collection => hash_get(question, :answers), :locals => {:assessment_results => assessment_results, :question_type => question_type, :user_answer => user_answer, :question => question} %>
              <% end %>
              <% if show_headers %>
                </div></div>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
		<% if !question.nil? -%>
			<div id="explain_text">Explain your choice using words and/or pictures.</div>
			<div id="explain_area_<%= question[:id] %>"><textarea cols="40" rows="14"></textarea> </div>
			<div id="explain_canvas_<%= question[:id] %>"></div>
		<% end -%>
      </div>
      <div class="after_answers">
        <% if question && hash_get(question, :question_type) == 'matching_question' && !assessing && ((@quiz && @quiz.show_correct_answers) || (!user_answer && !assessment_results)) %>
          <% other_matches = (hash_get(question, :matches) || hash_get(question, :answers, [])).select{|a| !hash_get(question, :answers, []).map{|an| hash_get(an, :match_id) }.include?(hash_get(a, :match_id)) } %>
          <% if !other_matches.empty? %>
            Other Incorrect Match Options:
            <ul class="matching_answer_incorrect_matches_list">
            <% other_matches.each do |match| %>
              <li><%= hash_get(match, :right) || hash_get(match, :text) %></li>
            <% end %>
            </ul>
          <% end %>
        <% end %>
      </div>
    </div>
    <% if user_answer %>
      <% if hash_get(user_answer, :correct) == true && comment_get(question, :correct_comments).present? %>
        <div class="question_comment question_correct_comment">
          <div class="comment_top"></div>
          <div class="question_comment_text correct_comments"><%= comment_get(question, :correct_comments) %></div>
        </div>
      <% elsif hash_get(user_answer, :correct) == false && comment_get(question, :incorrect_comments).present? %>
        <div class="question_comment question_incorrect_comment">
          <div class="comment_top"></div>
          <div class="question_comment_text incorrect_comments"><%= comment_get(question, :incorrect_comments) %></div>
        </div>
      <% end %>
      <% if hash_get(question, :neutral_comments) && comment_get(question, :neutral_comments).present? %>
        <div class="question_comment question_neutral_comment">
          <div class="comment_top"></div>
          <div class="question_comment_text neutral_comments"><%= comment_get(question, :neutral_comments) %></div>
        </div>
      <% end %>
      <% if (hash_get(user_answer, :more_comments) && comment_get(user_answer, :more_comments).present?) || (editable && question_type && question_type.entry_type != "none") %>
        <div class="question_comment question_neutral_comment">
          <div class="comment_top"></div>
          <div class="question_comment_text">
            <% if editable %>
              <span style="font-size: 0.8em;"><%= before_label(:additional_comments, "Additional Comments") %></span>
              <textarea name="question_comment_<%= hash_get(question, :id) %>" style="display: block; width: auto; margin-left: 5px; margin-right: 5px; height: 50px;"><%= comment_get(user_answer, :more_comments) || "" %></textarea>
            <% else %>
              <%= comment_get(user_answer, :more_comments) %>
            <% end %>
          </div>
        </div>
      <% end %>
    <% elsif !assessing %>
      <div title="<%= t('titles.question_correct_comment', "Students will see this comment if they get the question correct") %>" class="question_comment question_correct_comment" <%= hidden(true) unless question && comment_get(question, :correct_comments).present? %>>
        <div class="comment_top"></div>
        <div class="question_comment_text correct_comments" <%= hidden(true) if hash_get(question, :correct_comments_html).present? %>><%= hash_get(question, :correct_comments) %></div>
        <div class="question_comment_html correct_comments_html"><%= raw hash_get(question, :correct_comments_html) %></div>
      </div>
      <div title="<%= t('titles.question_incorrect_comment', "Students will see this comment if they get the question wrong") %>" class="question_comment question_incorrect_comment" <%= hidden(true) unless question && comment_get(question, :incorrect_comments).present? %>>
        <div class="comment_top"></div>
        <div class="question_comment_text incorrect_comments" <%= hidden(true) if hash_get(question, :incorrect_comments_html).present? %>><%= hash_get(question, :incorrect_comments) %></div>
        <div class="question_comment_html incorrect_comments_html"><%= raw hash_get(question, :incorrect_comments_html) %></div>
      </div>
      <div title="<%= t('titles.question_neutral_comment', "Students will see this comment once they've answered the question") %>" class="question_comment question_neutral_comment" <%= hidden(true) unless question && comment_get(question, :neutral_comments).present? %>>
        <div class="comment_top"></div>
        <div class="question_comment_text neutral_comments" <%= hidden(true) if hash_get(question, :neutral_comments_html).present? %>><%= hash_get(question, :neutral_comments) %></div>
        <div class="question_comment_html neutral_comments_html"><%= raw hash_get(question, :neutral_comments_html) %></div>
      </div>
    <% end %>
    <% if user_answer %>
      <div class="user_points" <%= hidden(true) if (assessing || assessment_results) && question_type && question_type.entry_type == "none" %>>
        <% if editable %>
          <input type="text" class="question_input" name="question_score_<%= hash_get(question, :id) %>" style="width: 30px; font-size: 1.2em;" value="<%= hash_get(user_answer, :correct) == "undefined" ? "--" : hash_get(user_answer, :points) %>"/>
        <% else %>
          <% if hash_get(user_answer, :correct) == "undefined" %>
           --
          <% else %>
            <%= hash_get(user_answer, :points) %>
          <% end %>
        <% end %>
        <% question[:points_possible] = 0 if question_type.answer_type == 'none' %>
        <span class="points_possible"> / <%= hash_get(question, :points_possible).to_f %></span>
      </div>
    <% end %>
    <% if question_bank_id %>
      <div class="bottom_links">
        <a href="#" class="move_question_link"><%= t('links.move_copy_question', "move/copy question to another bank") %></a> 
      </div>
    <% end %>
    <div class="clear"></div>
  </fieldset>
</div>

<style>
	#explain_canvas_<%= question[:id] %>{
		float: left;
	}
	#explain_text{
		float: left;
	}
	#explain_area_<%= question[:id] %>{
		float: left;
	}
</style>

<% js_block do %>

<script type="text/javascript"> $(document).ready(function() {
	prepareCanvas("explain_canvas_<%= question[:id] %>");
});
</script>

<% end -%>

<script>

// Copyright 2010 William Malone (www.williammalone.com)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var canvas;
var context;
var canvasWidth = 490;
var canvasHeight = 220;
var padding = 25;
var lineWidth = 8;
var colorPurple = "#cb3594";
var colorGreen = "#659b41";
var colorYellow = "#ffcf33";
var colorBrown = "#986928";
var crayonImage = new Image();
var markerImage = new Image();
var eraserImage = new Image();
var crayonBackgroundImage = new Image();
var markerBackgroundImage = new Image();
var eraserBackgroundImage = new Image();
var crayonTextureImage = new Image();
var clickX = new Array();
var clickY = new Array();
var clickColor = new Array();
var clickTool = new Array();
var clickSize = new Array();
var clickDrag = new Array();
var paint = false;
var curColor = colorPurple;
var curTool = "crayon";
var curSize = "normal";
var mediumStartX = 75;
var mediumStartY = 85;
var mediumImageWidth = 93;
var mediumImageHeight = 46;
var drawingAreaX = 111;
var drawingAreaY = 11;
var drawingAreaWidth = 267;
var drawingAreaHeight = 200;
var toolHotspotStartY = 95;
var toolHotspotHeight = 38;
var sizeHotspotStartY = 230;
var sizeHotspotHeight = 36;
var sizeHotspotWidthObject = new Object();
sizeHotspotWidthObject.huge = 39;
sizeHotspotWidthObject.large = 25;
sizeHotspotWidthObject.normal = 18;
sizeHotspotWidthObject.small = 16;
var totalLoadResources = 7
var curLoadResNum = 0;
/**
* Calls the redraw function after all neccessary resources are loaded.
*/
function resourceLoaded()
{
	if(++curLoadResNum >= totalLoadResources){
		redraw();
	}
}

/**
* Creates a canvas element, loads images, adds events, and draws the canvas for the first time.
*/
function prepareCanvas(canvas_element)
{
	// Create the canvas (Neccessary for IE because it doesn't know what a canvas element is)
	var canvasDiv = document.getElementById(canvas_element);
	canvas = document.createElement('canvas');
	canvas.setAttribute('width', canvasWidth);
	canvas.setAttribute('height', canvasHeight);
	canvas.setAttribute('id', 'canvas');
	canvasDiv.appendChild(canvas);
	if(typeof G_vmlCanvasManager != 'undefined') {
		canvas = G_vmlCanvasManager.initElement(canvas);
	}
	context = canvas.getContext("2d"); // Grab the 2d canvas context
	// Note: The above code is a workaround for IE 8 and lower. Otherwise we could have used:
	//     context = document.getElementById('canvas').getContext("2d");
	
	// Load images
	// -----------
	crayonImage.onload = function() { resourceLoaded(); 
	}
	crayonImage.src = "../../../../images/crayon-outline.png";
	//context.drawImage(crayonImage, 0, 0, 100, 100);
	
	markerImage.onload = function() { resourceLoaded(); 
	}
	markerImage.src = "../../../../images/marker-outline.png";
	
	eraserImage.onload = function() { resourceLoaded(); 
	}
	eraserImage.src = "../../../../images/eraser-outline.png";	
	
	crayonBackgroundImage.onload = function() { resourceLoaded(); 
	}
	crayonBackgroundImage.src = "../../../../images/crayon-background.png";
	
	markerBackgroundImage.onload = function() { resourceLoaded(); 
	}
	markerBackgroundImage.src = "../../../../images/marker-background.png";
	
	eraserBackgroundImage.onload = function() { resourceLoaded(); 
	}
	eraserBackgroundImage.src = "../../../../images/eraser-background.png";

	crayonTextureImage.onload = function() { resourceLoaded(); 
	}
	crayonTextureImage.src = "../../../../images/crayon-texture.png";

	// Add mouse events
	// ----------------
	$('#canvas').mousedown(function(e)
	{
		// Mouse down location
		var mouseX = e.pageX - this.offsetLeft;
		var mouseY = e.pageY - this.offsetTop;
		
		if(mouseX < drawingAreaX) // Left of the drawing area
		{
			if(mouseX > mediumStartX)
			{
				if(mouseY > mediumStartY && mouseY < mediumStartY + mediumImageHeight){
					curColor = colorPurple;
				}else if(mouseY > mediumStartY + mediumImageHeight && mouseY < mediumStartY + mediumImageHeight * 2){
					curColor = colorGreen;
				}else if(mouseY > mediumStartY + mediumImageHeight * 2 && mouseY < mediumStartY + mediumImageHeight * 3){
					curColor = colorYellow;
				}else if(mouseY > mediumStartY + mediumImageHeight * 3 && mouseY < mediumStartY + mediumImageHeight * 4){
					curColor = colorBrown;
				}
			}
		}
		else if(mouseX > drawingAreaX + drawingAreaWidth) // Right of the drawing area
		{
			if(mouseY > toolHotspotStartY)
			{
				if(mouseY > sizeHotspotStartY)
				{
					var sizeHotspotStartX = drawingAreaX + drawingAreaWidth + 15;
					if(mouseY < sizeHotspotStartY + sizeHotspotHeight && mouseX > sizeHotspotStartX)
					{
						if(mouseX < sizeHotspotStartX + sizeHotspotWidthObject.huge){
							curSize = "huge";
						}else if(mouseX < sizeHotspotStartX + sizeHotspotWidthObject.large + sizeHotspotWidthObject.huge){
							curSize = "large";
						}else if(mouseX < sizeHotspotStartX + sizeHotspotWidthObject.normal + sizeHotspotWidthObject.large + sizeHotspotWidthObject.huge){
							curSize = "normal";
						}else if(mouseX < sizeHotspotStartX + sizeHotspotWidthObject.small + sizeHotspotWidthObject.normal + sizeHotspotWidthObject.large + sizeHotspotWidthObject.huge){
							curSize = "small";						
						}
					}
				}
				else
				{
					if(mouseY < toolHotspotStartY + toolHotspotHeight){
						curTool = "crayon";
					}else if(mouseY < toolHotspotStartY + toolHotspotHeight * 2){
						curTool = "marker";
					}else if(mouseY < toolHotspotStartY + toolHotspotHeight * 3){
						curTool = "eraser";
					}
				}
			}
		}
		else if(mouseY > drawingAreaY && mouseY < drawingAreaY + drawingAreaHeight)
		{
			// Mouse click location on drawing area
		}
		paint = true;
		addClick(mouseX, mouseY, false);
		redraw();
	});
	
	$('#canvas').mousemove(function(e){
		if(paint==true){
			addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, true);
			redraw();
		}
	});
	
	$('#canvas').mouseup(function(e){
		paint = false;
	  	redraw();
	});
	
	$('#canvas').mouseleave(function(e){
		paint = false;
	});
}

/**
* Adds a point to the drawing array.
* @param x
* @param y
* @param dragging
*/
function addClick(x, y, dragging)
{
	clickX.push(x);
	clickY.push(y);
	clickTool.push(curTool);
	clickColor.push(curColor);
	clickSize.push(curSize);
	clickDrag.push(dragging);
}

/**
* Clears the canvas.
*/
function clearCanvas()
{
	context.fillStyle = '#ffffff'; // Work around for Chrome
	context.fillRect(0, 0, canvasWidth, canvasHeight); // Fill in the canvas with white
	canvas.width = canvas.width; // clears the canvas 
}

/**
* Redraws the canvas.
*/
function redraw()
{
	// Make sure required resources are loaded before redrawing
	if(curLoadResNum < totalLoadResources){ return; }
	
	clearCanvas();
	
	var locX;
	var locY;
	if(curTool == "crayon")
	{
		// Draw the crayon tool background
		context.drawImage(crayonBackgroundImage, 0, 0, canvasWidth, canvasHeight);
		
		// Purple
		locX = (curColor == colorPurple) ? 18 : 52;
		locY = 19;
		
		context.beginPath();
		context.moveTo(locX + 41, locY + 11);
		context.lineTo(locX + 41, locY + 35);
		context.lineTo(locX + 29, locY + 35);
		context.lineTo(locX + 29, locY + 33);
		context.lineTo(locX + 11, locY + 27);
		context.lineTo(locX + 11, locY + 19);
		context.lineTo(locX + 29, locY + 13);
		context.lineTo(locX + 29, locY + 11);
		context.lineTo(locX + 41, locY + 11);
		context.closePath();
		context.fillStyle = colorPurple;
		context.fill();	

		if(curColor == colorPurple){
			context.drawImage(crayonImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(crayonImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Green
		locX = (curColor == colorGreen) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 41, locY + 11);
		context.lineTo(locX + 41, locY + 35);
		context.lineTo(locX + 29, locY + 35);
		context.lineTo(locX + 29, locY + 33);
		context.lineTo(locX + 11, locY + 27);
		context.lineTo(locX + 11, locY + 19);
		context.lineTo(locX + 29, locY + 13);
		context.lineTo(locX + 29, locY + 11);
		context.lineTo(locX + 41, locY + 11);
		context.closePath();
		context.fillStyle = colorGreen;
		context.fill();	

		if(curColor == colorGreen){
			context.drawImage(crayonImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(crayonImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Yellow
		locX = (curColor == colorYellow) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 41, locY + 11);
		context.lineTo(locX + 41, locY + 35);
		context.lineTo(locX + 29, locY + 35);
		context.lineTo(locX + 29, locY + 33);
		context.lineTo(locX + 11, locY + 27);
		context.lineTo(locX + 11, locY + 19);
		context.lineTo(locX + 29, locY + 13);
		context.lineTo(locX + 29, locY + 11);
		context.lineTo(locX + 41, locY + 11);
		context.closePath();
		context.fillStyle = colorYellow;
		context.fill();	

		if(curColor == colorYellow){
			context.drawImage(crayonImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(crayonImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Yellow
		locX = (curColor == colorBrown) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 41, locY + 11);
		context.lineTo(locX + 41, locY + 35);
		context.lineTo(locX + 29, locY + 35);
		context.lineTo(locX + 29, locY + 33);
		context.lineTo(locX + 11, locY + 27);
		context.lineTo(locX + 11, locY + 19);
		context.lineTo(locX + 29, locY + 13);
		context.lineTo(locX + 29, locY + 11);
		context.lineTo(locX + 41, locY + 11);
		context.closePath();
		context.fillStyle = colorBrown;
		context.fill();	

		if(curColor == colorBrown){
			context.drawImage(crayonImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(crayonImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
	}
	else if(curTool == "marker")
	{
		// Draw the marker tool background
		context.drawImage(markerBackgroundImage, 0, 0, canvasWidth, canvasHeight);
		
		// Purple
		locX = (curColor == colorPurple) ? 18 : 52;
		locY = 19;
		
		context.beginPath();
		context.moveTo(locX + 10, locY + 24);
		context.lineTo(locX + 10, locY + 24);
		context.lineTo(locX + 22, locY + 16);
		context.lineTo(locX + 22, locY + 31);
		context.closePath();
		context.fillStyle = colorPurple;
		context.fill();	

		if(curColor == colorPurple){
			context.drawImage(markerImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(markerImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Green
		locX = (curColor == colorGreen) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 10, locY + 24);
		context.lineTo(locX + 10, locY + 24);
		context.lineTo(locX + 22, locY + 16);
		context.lineTo(locX + 22, locY + 31);
		context.closePath();
		context.fillStyle = colorGreen;
		context.fill();	

		if(curColor == colorGreen){
			context.drawImage(markerImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(markerImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Yellow
		locX = (curColor == colorYellow) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 10, locY + 24);
		context.lineTo(locX + 10, locY + 24);
		context.lineTo(locX + 22, locY + 16);
		context.lineTo(locX + 22, locY + 31);
		context.closePath();
		context.fillStyle = colorYellow;
		context.fill();	

		if(curColor == colorYellow){
			context.drawImage(markerImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(markerImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
		
		// Yellow
		locX = (curColor == colorBrown) ? 18 : 52;
		locY += 46;
		
		context.beginPath();
		context.moveTo(locX + 10, locY + 24);
		context.lineTo(locX + 10, locY + 24);
		context.lineTo(locX + 22, locY + 16);
		context.lineTo(locX + 22, locY + 31);
		context.closePath();
		context.fillStyle = colorBrown;
		context.fill();	

		if(curColor == colorBrown){
			context.drawImage(markerImage, locX, locY, mediumImageWidth, mediumImageHeight);
		}else{
			context.drawImage(markerImage, 0, 0, 59, mediumImageHeight, locX, locY, 59, mediumImageHeight);
		}
	}
	else if(curTool == "eraser")
	{
		context.drawImage(eraserBackgroundImage, 0, 0, canvasWidth, canvasHeight);
		context.drawImage(eraserImage, 18, 19, mediumImageWidth, mediumImageHeight);	
	}else{
		alert("Error: Current Tool is undefined");
	}
	
	if(curSize == "small"){
		locX = 467;
	}else if(curSize == "normal"){
		locX = 450;
	}else if(curSize == "large"){
		locX = 428;
	}else if(curSize == "huge"){
		locX = 399;
	}
	locY = 189;
	context.beginPath();
	context.rect(locX, locY, 2, 12);
	context.closePath();
	context.fillStyle = '#333333';
	context.fill();	
	
	// Keep the drawing in the drawing area
	context.save();
	context.beginPath();
	context.rect(drawingAreaX, drawingAreaY, drawingAreaWidth, drawingAreaHeight);
	context.clip();
		
	var radius;
	var i = 0;
	for(; i < clickX.length; i++)
	{		
		if(clickSize[i] == "small"){
			radius = 2;
		}else if(clickSize[i] == "normal"){
			radius = 5;
		}else if(clickSize[i] == "large"){
			radius = 10;
		}else if(clickSize[i] == "huge"){
			radius = 20;
		}else{
			alert("Error: Radius is zero for click " + i);
			radius = 0;	
		}
		
		context.beginPath();
		if(clickDrag[i] && i){
			context.moveTo(clickX[i-1]-15, clickY[i-1]-70);
		}else{
			context.moveTo(clickX[i]-15, clickY[i]-70);
		}
		context.lineTo(clickX[i]-15, clickY[i]-70);
		context.closePath();
		
		if(clickTool[i] == "eraser"){
			//context.globalCompositeOperation = "destination-out"; // To erase instead of draw over with white
			context.strokeStyle = 'white';
		}else{
			//context.globalCompositeOperation = "source-over";	// To erase instead of draw over with white
			context.strokeStyle = clickColor[i];
		}
		context.lineJoin = "round";
		context.lineWidth = radius;
		context.stroke();
		
	}
	//context.globalCompositeOperation = "source-over";// To erase instead of draw over with white
	context.restore();
	
	// Overlay a crayon texture (if the current tool is crayon)
	if(curTool == "crayon"){
		context.globalAlpha = 0.4; // No IE support
		context.drawImage(crayonTextureImage, 0, 0, canvasWidth, canvasHeight);
	}
	context.globalAlpha = 1; // No IE support
	
}


/**/

</script>
